using System;
using PrepareLanding.Defs;
using PrepareLanding.Patches;
using UnityEngine;
using Verse;

namespace PrepareLanding
{
    public class RimWorldEventHandler
    {
        public RimWorldEventHandler()
        {
            /*
             * Initialize events from harmony patches.
             */
            PatchWorldInterfaceOnGui.WorldInterfaceOnGui += OnWorldInterfaceOnGui;
            PatchWorldInterfaceUpdate.WorldInterfaceUpdate += OnWorldInterfaceUpdate;

            PatchGenerateWorld.WorldAboutToBeGenerated += OnWordAboutToBeGenerated;
            PatchGenerateWorld.WorldGenerated += OnWorldGenerated;
        }

        /// <summary>
        ///     Classes can register to this event to be called when definitions (Defs) have been loaded.
        /// </summary>
        public event Action DefsLoaded = delegate { };

        /// <summary>
        ///     Classes can register to this event to be called when the world is about to be generated.
        /// </summary>
        /// <remarks>This is not a RimWorld event, it is generated by this mod from an Harmony patch.</remarks>
        public event Action WorldAboutToBeGenerated = delegate { };

        /// <summary>
        ///     Classes can register to this event to be called when the world has been generated.
        /// </summary>
        /// <remarks>This is not a RimWorld event, it is generated by this mod from an Harmony patch.</remarks>
        public event Action WorldGenerated = delegate { };

        /// <summary>
        ///     Called when GameState.Playing has been entered and the world is fully loaded in the Play scene.
        ///     Will not be called during world generation and landing site selection.
        /// </summary>
        public event Action WorldLoaded = delegate { };


        /// <summary>
        ///     Classes can register to this event to be called when the world has been generated and / or loaded.
        ///     Classes should not register to this event <b>and</b> WorldGenerated or WorldLoaded as they would receive the same event twice.
        /// </summary>
        public event Action WorldGeneratedOrLoaded = delegate { };

        /// <summary>
        ///     Classes can register to this event to be called when the OnGUI() method (while on the world map) is called.
        ///     See also <seealso cref="WorldInterfaceOnGui" />.
        /// </summary>
        public event Action WorldInterfaceOnGui = delegate { };

        /// <summary>
        ///     Classes can register to this event to be called when the Update() method (while on the world map) is called.
        ///     See also <seealso cref="WorldInterfaceUpdate" />.
        /// </summary>
        public event Action WorldInterfaceUpdate = delegate { };

        /// <summary>
        ///     Called when the world has been generated.
        /// </summary>
        private void OnWorldGenerated()
        {
            Log.Message("[PrepareLanding] OnWorldGenerated");

            // note: if we don't use ExecuteWhenFinished() then the world has been generated but the world field (from Find.World) is not yet set and is null.
            // so better use ExecuteWhenFinished as we are inside a LongEventHandler; see RimWorld.Page_CreateWorldParams.CanDoNext()
            LongEventHandler.ExecuteWhenFinished(delegate
            {
                WorldGenerated?.Invoke();
                WorldGeneratedOrLoaded?.Invoke();
            });
        }

        /// <summary>
        ///     Called when the world is about to be generated.
        /// </summary>
        private void OnWordAboutToBeGenerated()
        {
            Log.Message("[PrepareLanding] OnWordAboutToBeGenerated");
            WorldAboutToBeGenerated?.Invoke();
        }

        /// <summary>
        ///     Called when definitions (Defs) has been loaded.
        /// </summary>
        public void OnDefsLoaded()
        {
            Log.Message("[PrepareLanding] OnDefsLoaded");
            DefsLoaded?.Invoke();
        }

        /// <summary>
        ///     Called when a world is loaded. This happens only when a save file is loaded.
        /// </summary>
        public void OnWorldLoaded()
        {
            Log.Message("[PrepareLanding] OnWorldLoaded");
            WorldLoaded?.Invoke();
            WorldGeneratedOrLoaded?.Invoke();
        }

        /// <summary>
        ///     Called on each <see cref="RimWorld.WorldInterface" /> Gui event.
        /// </summary>
        private void OnWorldInterfaceOnGui()
        {
            //Log.Message("[PrepareLanding] OnWorldInterfaceOnGui");
            OnWorldInterfaceOnGuiPump();
            WorldInterfaceOnGui?.Invoke();
        }

        /// <summary>
        ///     Called on each <see cref="RimWorld.WorldInterface" /> update event.
        /// </summary>
        private void OnWorldInterfaceUpdate()
        {
            //Log.Message("[PrepareLanding] OnWorldInterfaceUpdate");
            WorldInterfaceUpdate?.Invoke();
        }

        /// <summary>
        ///     Handle key down events when the World interface is displayed.
        /// </summary>
        private void OnWorldInterfaceOnGuiPump()
        {
            if (Event.current.type != EventType.KeyDown)
                return;

            // coordinates window
            if (KeyBindings.CoordinatesWindow.JustPressed && KeysUtils.IsControlPressedAndHeld)
            {
                if (Coordinates.MainWindow.CanBeDisplayed && !Coordinates.MainWindow.IsInWindowStack)
                {
                    var coordinatesWindows = new Coordinates.MainWindow();
                    Find.WindowStack.Add(coordinatesWindows);
                }
            }

            // main window
            if (KeyBindings.PrepareLandingWindow.JustPressed && KeysUtils.IsControlPressedAndHeld)
            {
                // don't add a new window if the window is already there; if it's not create a new one.
                if (PrepareLanding.Instance.MainWindow == null)
                    PrepareLanding.Instance.MainWindow = new MainWindow(PrepareLanding.Instance.GameData);

                if (!Find.WindowStack.IsOpen(PrepareLanding.Instance.MainWindow))
                {
                    Find.WindowStack.Add(PrepareLanding.Instance.MainWindow);
                }
            }

        }
    }
}